package com.techfly.demo.util;

import android.app.ActivityManager;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.Window;
import android.widget.TextView;
import android.widget.Toast;

import com.daimajia.numberprogressbar.NumberProgressBar;
import com.techfly.demo.R;
import com.techfly.demo.bean.EventBean;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;

import de.greenrobot.event.EventBus;

/**
 * @author coolszy
 * @date 2012-4-26
 * @blog http://blog.92coding.com
 */

public class UpdateManager {
    /* 下载中 */
    private static final int DOWNLOAD = 1;
    /* 下载结束 */
    private static final int DOWNLOAD_FINISH = 2;
    /* 直接安装 */
    private static final int DOWNLOAD_INSTALL = 3;

    protected static final String TAG = "UpdateManager";
    /* 保存解析的XML信息 */
//    HashMap<String, String> mHashMap;
    //	HashMap<String, String> sHashMap;
    /* 下载保存路径 */
    private String mSavePath;

    private File savaFile = null;//已下载文件路径

    /* 记录进度条数量 */
    private int progress;
    /* 是否取消更新 */
    private boolean cancelUpdate = false;

    private String versionInfo = "";

    private static Context mContext;
    /* 更新进度条 */
    private NumberProgressBar mProgress;
    private Dialog mDownloadDialog;

    private InputStream is = null;
    private InputStream sIs = null;

    private String m_version = "";
    private String m_url = "";
    private Integer m_isMust = 0;//0-自愿；1-强制


    private Handler mHandler = new Handler() {
        public void handleMessage(Message msg) {
            switch (msg.what) {
                // 正在下载
                case DOWNLOAD:
                    // 设置进度条位置
                    mProgress.setProgress(progress);
                    break;
                case DOWNLOAD_FINISH:
//                    Toast.makeText(mContext, "下载完成,解压资源中,请稍后！", Toast.LENGTH_LONG).show();
                    // 安装文件
//				unzip(srcZipFile, path);
//                    installApk();
                    break;
                case DOWNLOAD_INSTALL:
                    instanll(savaFile, mContext);
                    break;
                default:
                    break;
            }
        }

        ;
    };

    public UpdateManager(Context context, String version, String url, String versionInfo, int isMust) {

        Log.i("TTLS", "UpdateManager-->versionCode" + version + "url" + url);
        this.mContext = context;
        this.m_version = version;
        this.m_url = url;
        this.versionInfo = versionInfo;
        this.m_isMust = isMust;
    }

    /**
     * 检测软件更新
     */
    public void checkUpdate() {
        if (isUpdate()) {
            // 显示提示对话框
            showNoticeDialog();
        } else {
            return;
        }
    }

    /**
     * 检查软件是否有更新版本
     *
     * @return
     */
    public boolean isUpdate() {
        // 获取当前软件版本
        double cur_version = getCurVersion();
        double server_version = Double.parseDouble(m_version);

        Log.i("TEST", "cur_version=" + cur_version + ",m_version=" + m_version + ",server_version=" + server_version);

        if (cur_version >= server_version) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * 获取版本号
     *
     * @return 当前应用的版本号
     */
    public int getCurVersion() {
        try {
            PackageManager manager = mContext.getPackageManager();
            PackageInfo info = manager.getPackageInfo(mContext.getPackageName(), 0);
//			String version = info.versionName;
            int versionCodee = info.versionCode;
            return versionCodee;
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }

    /**
     * 显示软件更新对话框
     */
    public void showNoticeDialog() {
        final AlertDialog dialog = new Builder(mContext, R.style.MyDialog).create();
        dialog.show();
        Window window = dialog.getWindow();
        window.setGravity(Gravity.CENTER);  //此处可以设置dialog显示的位置
        View view = View.inflate(mContext, R.layout.dialog_three_select, null);
        window.setContentView(view);

        LogsUtil.normal("m_url=" + m_url);


        Boolean isAlreadyDownload = false;//是否已下载

        String[] fileNameArray = m_url.split("/");
        if (fileNameArray.length > 0) {
            savaFile = new File(Environment.getExternalStorageDirectory() + "/Download/" + fileNameArray[fileNameArray.length - 1]);
            if (savaFile.exists()) {
                isAlreadyDownload = true;
                LogsUtil.normal(fileNameArray[fileNameArray.length - 1] + "文件已存在");
            }
        }

        TextView tv0 = (TextView) view.findViewById(R.id.title_tv);
        TextView tv1 = (TextView) view.findViewById(R.id.middle_tv);
        TextView tv2 = (TextView) view.findViewById(R.id.cancel);
        TextView tv3 = (TextView) view.findViewById(R.id.ok);
        TextView tv4 = (TextView) view.findViewById(R.id.web);

        String[] contentArray = versionInfo.split("#");
        String content = "";
        for (int i = 0; i < contentArray.length; i++) {
            if (i == contentArray.length - 1) {
                content = content + contentArray[i];
            } else {
                content = content + contentArray[i] + "\n";
            }
        }
        tv1.setGravity(Gravity.LEFT);
        tv1.setText(content);

        if (isAlreadyDownload) {
            tv0.setText(R.string.soft_update_already_download);
            tv2.setText(R.string.soft_wait_install);
            tv3.setText(R.string.soft_now_install);
        } else {

            tv0.setText(R.string.soft_update_title);
            tv3.setText(R.string.soft_update_updatebtn);

            if (m_isMust == 0) {
                tv2.setText(R.string.soft_update_later);
            } else if (m_isMust == 1) {
                tv2.setText(R.string.soft_update_exit);
                dialog.setCanceledOnTouchOutside(false);
                dialog.setCancelable(false);
            }
        }

        tv2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
                if (m_isMust == 0) {
                } else if (m_isMust == 1) {
                    EventBus.getDefault().post(new EventBean(EventBean.EVENT_EXIT_APP));
                }
            }
        });

        if (isAlreadyDownload) {
            tv3.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    dialog.dismiss();
                    mHandler.sendEmptyMessage(DOWNLOAD_INSTALL);
                }
            });
        } else {
            tv3.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    dialog.dismiss();
                    // 显示下载对话框
                    if (!isServiceWork(mContext, "com.techfly.micromall.util.UpdateService")) {
                        ToastUtil.DisplayToast(mContext, "已添加下载任务,可下拉通知栏查看", Toast.LENGTH_LONG);
                        Intent intent = new Intent(mContext, UpdateService.class);
                        intent.putExtra("UPDATE_URL", m_url);
                        mContext.startService(intent);
                    }
                }
            });
        }

        tv4.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();

                Uri uri = Uri.parse(m_url);
                Intent intent = new Intent(Intent.ACTION_VIEW, uri);
                mContext.startActivity(intent);


            }
        });

    }

    //安装下载后的apk文件
    private void instanll(File file, Context context) {
        Intent intent = new Intent(Intent.ACTION_VIEW);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.setAction(android.content.Intent.ACTION_VIEW);
        intent.setDataAndType(Uri.fromFile(file), "application/vnd.android.package-archive");
        context.startActivity(intent);
    }

    /*
     * 判断某个服务是否正在运行的方法
     */
    public boolean isServiceWork(Context mContext, String serviceName) {
        boolean isWork = false;
        ActivityManager myAM = (ActivityManager) mContext
                .getSystemService(Context.ACTIVITY_SERVICE);
        List<ActivityManager.RunningServiceInfo> myList = myAM.getRunningServices(20);
        if (myList.size() <= 0) {
            return false;
        }
        for (int i = 0; i < myList.size(); i++) {
            String mName = myList.get(i).service.getClassName().toString();
            if (mName.equals(serviceName)) {
                isWork = true;
                break;
            }
        }
        return isWork;
    }

    /**
     * 显示软件下载对话框
     */
    private void showDownloadDialog() {
        // 构造软件下载对话框
        Builder builder = new Builder(mContext);
        builder.setTitle(R.string.soft_updating);
        // 给下载对话框增加进度条
        final LayoutInflater inflater = LayoutInflater.from(mContext);
        View v = inflater.inflate(R.layout.dialog_softupdate_progress, null);
        mProgress = (NumberProgressBar) v.findViewById(R.id.update_progress);
        builder.setView(v);
        // 取消更新
        builder.setNegativeButton(R.string.soft_update_cancel, new OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                // 设置取消状态
                cancelUpdate = true;
            }
        });

        mDownloadDialog = builder.create();
        mDownloadDialog.setCancelable(false);
        mDownloadDialog.setCanceledOnTouchOutside(false);
        mDownloadDialog.show();
        // 下载文件
        downloadApk();
    }

    /**
     * 下载apk文件
     */
    private void downloadApk() {
        // 启动新线程下载软件
        new downloadApkThread().start();
    }

    /**
     * 下载文件线程
     *
     * @author coolszy
     * @date 2012-4-26
     * @blog http://blog.92coding.com
     */
    private class downloadApkThread extends Thread {
        @Override
        public void run() {
            try {
                // 判断SD卡是否存在，并且是否具有读写权限
                if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
                    // 获得存储卡的路径
                    String sdpath = Environment.getExternalStorageDirectory() + "/Download/";
                    mSavePath = sdpath;
//                    URL url = new URL(mHashMap.get("url"));
                    URL url = new URL(m_url);
                    // 创建连接
                    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                    conn.connect();
                    // 获取文件大小
                    int length = conn.getContentLength();
                    // 创建输入流
                    InputStream is = conn.getInputStream();

                    File file = new File(mSavePath);
                    // 判断文件目录是否存在
                    if (!file.exists()) {
                        file.mkdir();
                    }
                    File apkFile = new File(mSavePath, "test.apk");
                    FileOutputStream fos = new FileOutputStream(apkFile);
                    int count = 0;
                    // 缓存
                    byte buf[] = new byte[1024];
                    // 写入到文件中
                    do {
                        int numread = is.read(buf);
                        count += numread;
                        // 计算进度条位置
                        progress = (int) (((float) count / length) * 100);
                        // 更新进度
                        mHandler.sendEmptyMessage(DOWNLOAD);
                        if (numread <= 0) {
                            // 下载完成
                            mHandler.sendEmptyMessage(DOWNLOAD_FINISH);
                            break;
                        }
                        // 写入文件
                        fos.write(buf, 0, numread);
                    } while (!cancelUpdate);// 点击取消就停止下载.
                    fos.close();
                    is.close();
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            // 取消下载对话框显示
            mDownloadDialog.dismiss();
        }
    }


}
