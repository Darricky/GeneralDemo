apply plugin: 'com.android.application'

def gitSha() {
    return "88ec8d";
}

def javaVersion = JavaVersion.VERSION_1_7

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    defaultConfig {
        applicationId "com.techfly.demo"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 4
        versionName "1.3"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"


        buildConfigField "String", "MESSAGE", "\"I am the base apk\""
        buildConfigField "String", "CLIENTVERSION", "\"${gitSha()}\""
        buildConfigField "String", "PLATFORM",  "\"all\""
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/ASL2.0'
    }

    buildTypes {
        release {
            // 不显示Log, 在java代码中的调用方式为：BuildConfig.LOG_DEBUG
            buildConfigField "boolean", "LEO_DEBUG", "false"
            minifyEnabled false //混淆编译,改为true apk 变小
            zipAlignEnabled true
            shrinkResources true//移除无用的资源文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }

    repositories {
        mavenCentral()
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:23.4.0'
    testCompile 'junit:junit:4.12'

    //可选，用于生成application类
    compile('com.tencent.tinker:tinker-android-anno:1.6.2')
    //tinker的核心库
    compile('com.tencent.tinker:tinker-android-lib:1.6.2')
    compile('com.android.support:multidex:1.0.1')

    compile project(':pulltorefresh')
    compile project(':emoji')
    compile project(':FileSelector')

//    compile 'com.android.support:appcompat-v7:23.1.0'
    compile 'com.github.traex.rippleeffect:library:1.2.3'
    //涟漪效果
    compile 'com.jakewharton:butterknife:6.1.0'
    compile 'com.android.support:cardview-v7:23.2.1'
    compile 'com.android.support:recyclerview-v7:23.2.1'
    compile 'com.android.support:design:23.2.1'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'com.github.bumptech.glide:glide:3.6.1'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.squareup.okio:okio:1.5.0'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.bigkoo:convenientbanner:1.1.0'
    compile 'com.bigkoo:pickerview:2.0.8'
    compile 'de.hdodenhof:circleimageview:2.1.0'
    compile 'cn.pedant.sweetalert:library:1.3'
    compile 'com.daimajia.numberprogressbar:library:1.2@aar'
    //IOS风格时间选择器
    compile 'com.bigkoo:pickerview:2.0.8'
    //日历
    compile 'com.appeaser.sublimepickerlibrary:sublimepickerlibrary:2.1.1'
    //滑动删除
    compile 'com.baoyz.swipemenulistview:library:1.3.0'
    compile 'com.malinskiy:superrecyclerview:1.1.1'
    compile 'com.github.iwgang:countdownview:2.1'

    //九宫格
    compile 'com.jaeger.ninegridimageview:library:1.0.2'

    //滑动删除Activity
    compile 'me.imid.swipebacklayout.lib:library:1.0.0'
    //Emoji
//    compile 'com.tb.emoji:yykEmoji:1.0.0'
//    compile 'io.github.rockerhieu:emojicon:1.0.0'

}


def bakPath = file("${buildDir}/bakApk/")

ext {
    tinkerEnabled = true
    //you should bak the following files
    //old apk file to build patch apk
    tinkerOldApkPath = "${bakPath}/app-debug-1104-17-12-07.apk" //替换成你第一次生成的apk文件名
    //proguard mapping file to build patch apk
    tinkerApplyMappingPath = "${bakPath}/"
    //resource R.txt to build patch apk, must input if there is resource changed
    tinkerApplyResourcePath = "${bakPath}/app-debug-1104-17-12-07-R.txt"//替换成你第一次生成的R.txt名字
}


def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

if (buildWithTinker()) {
    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch {

        oldApk = getOldApkPath()

        ignoreWarning = false

        useSign = true

        buildConfig {

            applyMapping = getApplyMappingPath()

            applyResourceMapping = getApplyResourceMappingPath()

            tinkerId = "TinkerDemo"
        }

        dex {

            dexMode = "jar"

            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]

            loader = ["com.tencent.tinker.loader.*",
                      "tinker.sample.android.SampleApplication",
                      //use sample, let BaseBuildInfo unchangeable with tinker
                      "tinker.sample.android.app.BaseBuildInfo"
            ]
        }

        lib {
            pattern = ["lib/armeabi/*.so"]
        }

        res {

            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]

            ignoreChange = ["assets/sample_meta.txt"]

            largeModSize = 100
        }

        packageConfig {
            configField("patchMessage", "tinker is sample to use")
            configField("platform", "all")
        }

        sevenZip {
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
        }
    }

    def taskName = "debug"

    tasks.all {
        if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {
            it.doLast {
                copy {
                    def date = new Date().format("MMdd-HH-mm-ss")
                    from "${buildDir}/outputs/apk/${project.getName()}-${taskName}.apk"
                    into bakPath
                    rename { String fileName ->
                        fileName.replace("${project.getName()}-${taskName}.apk", "${project.getName()}-${taskName}-${date}.apk")
                    }

                    from "${buildDir}/outputs/mapping/${taskName}/mapping.txt"
                    into bakPath
                    rename { String fileName ->
                        fileName.replace("mapping.txt", "${project.getName()}-${taskName}-${date}-mapping.txt")
                    }

                    from "${buildDir}/intermediates/symbols/${taskName}/R.txt"
                    into bakPath
                    rename { String fileName ->
                        fileName.replace("R.txt", "${project.getName()}-${taskName}-${date}-R.txt")
                    }
                }
            }
        }
    }
}
